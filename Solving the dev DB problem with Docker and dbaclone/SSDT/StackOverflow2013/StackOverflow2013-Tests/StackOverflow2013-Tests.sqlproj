<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <Name>StackOverflow2013_Tests</Name>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectVersion>4.1</ProjectVersion>
    <ProjectGuid>{BBFFCD1D-7B39-42BC-B460-844F8F204759}</ProjectGuid>
    <DSP>Microsoft.Data.Tools.Schema.Sql.Sql140DatabaseSchemaProvider</DSP>
    <OutputType>Database</OutputType>
    <RootPath>
    </RootPath>
    <RootNamespace>StackOverflow2013_Tests</RootNamespace>
    <AssemblyName>StackOverflow2013_Tests</AssemblyName>
    <ModelCollation>1033,CI</ModelCollation>
    <DefaultFileStructure>BySchemaType</DefaultFileStructure>
    <DeployToDatabase>True</DeployToDatabase>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <TargetLanguage>CS</TargetLanguage>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <SqlServerVerification>False</SqlServerVerification>
    <IncludeCompositeObjects>True</IncludeCompositeObjects>
    <TargetDatabaseSet>True</TargetDatabaseSet>
    <DefaultCollation>SQL_Latin1_General_CP1_CI_AS</DefaultCollation>
    <DefaultFilegroup>PRIMARY</DefaultFilegroup>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <OutputPath>bin\Release\</OutputPath>
    <BuildScriptName>$(MSBuildProjectName).sql</BuildScriptName>
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <OutputPath>bin\Debug\</OutputPath>
    <BuildScriptName>$(MSBuildProjectName).sql</BuildScriptName>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">11.0</VisualStudioVersion>
    <!-- Default to the v11.0 targets path if the targets file for the current VS version is not found -->
    <SSDTExists Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\SSDT\Microsoft.Data.Tools.Schema.SqlTasks.targets')">True</SSDTExists>
    <VisualStudioVersion Condition="'$(SSDTExists)' == ''">11.0</VisualStudioVersion>
  </PropertyGroup>
  <Import Condition="'$(SQLDBExtensionsRefPath)' != ''" Project="$(SQLDBExtensionsRefPath)\Microsoft.Data.Tools.Schema.SqlTasks.targets" />
  <Import Condition="'$(SQLDBExtensionsRefPath)' == ''" Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\SSDT\Microsoft.Data.Tools.Schema.SqlTasks.targets" />
  <ItemGroup>
    <Folder Include="Properties" />
    <Folder Include="TestBasic" />
    <Folder Include="TestStackOverflow2013" />
    <Folder Include="tSQLt" />
    <Folder Include="tSQLt\Functions" />
    <Folder Include="tSQLt\Stored Procedures" />
    <Folder Include="tSQLt\Tables" />
    <Folder Include="tSQLt\User Defined Types" />
    <Folder Include="tSQLt\Views" />
    <Folder Include="Security" />
    <Folder Include="Assemblies" />
    <Folder Include="Stored Procedures\" />
  </ItemGroup>
  <ItemGroup>
    <Build Include="tSQLt\Functions\F_Num.sql" />
    <Build Include="tSQLt\Functions\GetTestResultFormatter.sql" />
    <Build Include="tSQLt\Functions\Info.sql" />
    <Build Include="tSQLt\Functions\Private_Bin2Hex.sql" />
    <Build Include="tSQLt\Functions\Private_FindConstraint.sql" />
    <Build Include="tSQLt\Functions\Private_GetCleanObjectName.sql" />
    <Build Include="tSQLt\Functions\Private_GetCleanSchemaName.sql" />
    <Build Include="tSQLt\Functions\Private_GetCommaSeparatedColumnList.sql" />
    <Build Include="tSQLt\Functions\Private_GetConfiguration.sql" />
    <Build Include="tSQLt\Functions\Private_GetConstraintType.sql" />
    <Build Include="tSQLt\Functions\Private_GetDataTypeOrComputedColumnDefinition.sql" />
    <Build Include="tSQLt\Functions\Private_GetDefaultConstraintDefinition.sql" />
    <Build Include="tSQLt\Functions\Private_GetExternalAccessKeyBytes.sql" />
    <Build Include="tSQLt\Functions\Private_GetForeignKeyDefinition.sql" />
    <Build Include="tSQLt\Functions\Private_GetForeignKeyParColumns.sql" />
    <Build Include="tSQLt\Functions\Private_GetForeignKeyRefColumns.sql" />
    <Build Include="tSQLt\Functions\Private_GetFullTypeName.sql" />
    <Build Include="tSQLt\Functions\Private_GetIdentityDefinition.sql" />
    <Build Include="tSQLt\Functions\Private_GetLastTestNameIfNotProvided.sql" />
    <Build Include="tSQLt\Functions\Private_GetOriginalTableInfo.sql" />
    <Build Include="tSQLt\Functions\Private_GetOriginalTableName.sql" />
    <Build Include="tSQLt\Functions\Private_GetQuotedFullName.sql" />
    <Build Include="tSQLt\Functions\Private_GetQuotedTableNameForConstraint.sql" />
    <Build Include="tSQLt\Functions\Private_GetSchemaId.sql" />
    <Build Include="tSQLt\Functions\Private_GetUniqueConstraintDefinition.sql" />
    <Build Include="tSQLt\Functions\Private_IsTestClass.sql" />
    <Build Include="tSQLt\Functions\Private_QuoteClassNameForNewTestClass.sql" />
    <Build Include="tSQLt\Functions\Private_ResolveApplyConstraintParameters.sql" />
    <Build Include="tSQLt\Functions\Private_ResolveFakeTableNamesForBackwardCompatibility.sql" />
    <Build Include="tSQLt\Functions\Private_ResolveName.sql" />
    <Build Include="tSQLt\Functions\Private_ResolveObjectName.sql" />
    <Build Include="tSQLt\Functions\Private_ResolveSchemaName.sql" />
    <Build Include="tSQLt\Functions\Private_ScriptIndex.sql" />
    <Build Include="tSQLt\Functions\Private_SqlVariantFormatter.sql" />
    <Build Include="tSQLt\Functions\Private_SqlVersion.sql" />
    <Build Include="tSQLt\Functions\TestCaseSummary.sql" />
    <Build Include="tSQLt\Stored Procedures\ApplyConstraint.sql" />
    <Build Include="tSQLt\Stored Procedures\ApplyTrigger.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertEmptyTable.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertEquals.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertEqualsString.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertEqualsTable.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertEqualsTableSchema.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertLike.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertNotEquals.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertObjectDoesNotExist.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertObjectExists.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertResultSetsHaveSameMetaData.sql" />
    <Build Include="tSQLt\Stored Procedures\AssertStringIn.sql" />
    <Build Include="tSQLt\Stored Procedures\CaptureOutput.sql" />
    <Build Include="tSQLt\Stored Procedures\DefaultResultFormatter.sql" />
    <Build Include="tSQLt\Stored Procedures\DropClass.sql" />
    <Build Include="tSQLt\Stored Procedures\EnableExternalAccess.sql" />
    <Build Include="tSQLt\Stored Procedures\ExpectException.sql" />
    <Build Include="tSQLt\Stored Procedures\ExpectNoException.sql" />
    <Build Include="tSQLt\Stored Procedures\Fail.sql" />
    <Build Include="tSQLt\Stored Procedures\FakeFunction.sql" />
    <Build Include="tSQLt\Stored Procedures\FakeTable.sql" />
    <Build Include="tSQLt\Stored Procedures\GetNewTranName.sql" />
    <Build Include="tSQLt\Stored Procedures\InstallExternalAccessKey.sql" />
    <Build Include="tSQLt\Stored Procedures\LogCapturedOutput.sql" />
    <Build Include="tSQLt\Stored Procedures\NewConnection.sql" />
    <Build Include="tSQLt\Stored Procedures\NewTestClass.sql" />
    <Build Include="tSQLt\Stored Procedures\NullTestResultFormatter.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_ApplyCheckConstraint.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_ApplyForeignKeyConstraint.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_ApplyUniqueConstraint.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_CleanTestResult.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_CompareTables.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_CompareTablesFailIfUnequalRowsExists.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_CreateFakeFunction.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_CreateFakeOfTable.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_CreateProcedureSpy.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_CreateResultTableForCompareTables.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_DisallowOverwritingNonTestSchema.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_GetCursorForRunAll.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_GetCursorForRunNew.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_GetSetupProcedureName.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_Init.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_InputBuffer.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_MarkFakeTable.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_MarkObjectBeforeRename.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_MarkSchemaAsTestClass.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_OutputTestResults.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_Print.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_PrintXML.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RemoveSchemaBinding.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RemoveSchemaBoundReferences.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RenameObjectToUniqueName.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RenameObjectToUniqueNameUsingObjectId.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_ResetNewTestClassList.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_Run.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RunAll.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RunCursor.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RunMethodHandler.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RunNew.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RunTest.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_RunTestClass.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_SaveTestNameForSession.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_SetConfiguration.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_SetFakeViewOff_SingleView.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_SetFakeViewOn_SingleView.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_ValidateFakeTableParameters.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_ValidateObjectsCompatibleWithFakeFunction.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_ValidateProcedureCanBeUsedWithSpyProcedure.sql" />
    <Build Include="tSQLt\Stored Procedures\Private_ValidateThatAllDataTypesInTableAreSupported.sql" />
    <Build Include="tSQLt\Stored Procedures\RemoveExternalAccessKey.sql" />
    <Build Include="tSQLt\Stored Procedures\RemoveObject.sql" />
    <Build Include="tSQLt\Stored Procedures\RemoveObjectIfExists.sql" />
    <Build Include="tSQLt\Stored Procedures\RenameClass.sql" />
    <Build Include="tSQLt\Stored Procedures\Reset.sql" />
    <Build Include="tSQLt\Stored Procedures\ResultSetFilter.sql" />
    <Build Include="tSQLt\Stored Procedures\Run.sql" />
    <Build Include="tSQLt\Stored Procedures\RunAll.sql" />
    <Build Include="tSQLt\Stored Procedures\RunC.sql" />
    <Build Include="tSQLt\Stored Procedures\RunNew.sql" />
    <Build Include="tSQLt\Stored Procedures\RunTest.sql" />
    <Build Include="tSQLt\Stored Procedures\RunTestClass.sql" />
    <Build Include="tSQLt\Stored Procedures\RunWithNullResults.sql" />
    <Build Include="tSQLt\Stored Procedures\RunWithXmlResults.sql" />
    <Build Include="tSQLt\Stored Procedures\SetFakeViewOff.sql" />
    <Build Include="tSQLt\Stored Procedures\SetFakeViewOn.sql" />
    <Build Include="tSQLt\Stored Procedures\SetTestResultFormatter.sql" />
    <Build Include="tSQLt\Stored Procedures\SetVerbose.sql" />
    <Build Include="tSQLt\Stored Procedures\SpyProcedure.sql" />
    <Build Include="tSQLt\Stored Procedures\StubRecord.sql" />
    <Build Include="tSQLt\Stored Procedures\SuppressOutput.sql" />
    <Build Include="tSQLt\Stored Procedures\TableToText.sql" />
    <Build Include="tSQLt\Stored Procedures\Uninstall.sql" />
    <Build Include="tSQLt\Stored Procedures\XmlResultFormatter.sql" />
    <Build Include="tSQLt\Tables\CaptureOutputLog.sql" />
    <Build Include="tSQLt\Tables\Private_AssertEqualsTableSchema_Actual.sql" />
    <Build Include="tSQLt\Tables\Private_AssertEqualsTableSchema_Expected.sql" />
    <Build Include="tSQLt\Tables\Private_Configurations.sql" />
    <Build Include="tSQLt\Tables\Private_ExpectException.sql" />
    <Build Include="tSQLt\Tables\Private_NewTestClassList.sql" />
    <Build Include="tSQLt\Tables\Private_NullCellTable.sql" />
    <Build Include="tSQLt\Tables\Private_RenamedObjectLog.sql" />
    <Build Include="tSQLt\Tables\Run_LastExecution.sql" />
    <Build Include="tSQLt\Tables\TestMessage.sql" />
    <Build Include="tSQLt\Tables\TestResult.sql" />
    <Build Include="tSQLt\User Defined Types\AssertStringTable.sql" />
    <Build Include="tSQLt\User Defined Types\Private.sql" />
    <Build Include="tSQLt\Views\Private_SysIndexes.sql" />
    <Build Include="tSQLt\Views\Private_SysTypes.sql" />
    <Build Include="tSQLt\Views\TestClasses.sql" />
    <Build Include="tSQLt\Views\Tests.sql" />
    <Build Include="Security\tSQLt.sql" />
    <Build Include="Security\TestStackOverflow2013.sql" />
    <Build Include="Security\TestBasic.sql" />
    <Build Include="TestBasic\test If database has correct collation.sql" />
    <Build Include="TestBasic\test If function tSQLt.F_Num has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_Bin2Hex has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_FindConstraint has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetCleanObjectName has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetCleanSchemaName has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetCommaSeparatedColumnList has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetConfiguration has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetConstraintType has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetDataTypeOrComputedColumnDefinition has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetDefaultConstraintDefinition has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetForeignKeyDefinition has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetForeignKeyParColumns has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetForeignKeyRefColumns has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetFullTypeName has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetIdentityDefinition has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetLastTestNameIfNotProvided has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetOriginalTableInfo has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetOriginalTableName has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetQuotedFullName has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetQuotedTableNameForConstraint has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetSchemaId has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_GetUniqueConstraintDefinition has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_IsTestClass has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_QuoteClassNameForNewTestClass has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_ResolveApplyConstraintParameters has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_ResolveName has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_ResolveObjectName has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_ResolveSchemaName has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_ScriptIndex has the correct parameters.sql" />
    <Build Include="TestBasic\test If function tSQLt.Private_SqlVariantFormatter has the correct parameters.sql" />
    <Build Include="TestBasic\test If index PK__CaptureO__3214EC07FD0FE09B has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK__Private___737584F7A06C2F0A has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK__Private___F8BF561A05090042 has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK__Private_RenamedObjectLog__Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK__TestResu__3214EC071058DDF5 has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_Badges_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_Comments_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_LinkTypes_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_PostLinks_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_Posts_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_PostTypes_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_Users_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_Votes_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If index PK_VoteType_Id has the correct columns.sql" />
    <Build Include="TestBasic\test If stored procedure dbo.DropIndexes exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.ApplyConstraint exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.ApplyTrigger exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertEmptyTable exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertEquals exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertEqualsString exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertEqualsTable exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertEqualsTableSchema exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertLike exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertNotEquals exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertObjectDoesNotExist exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertObjectExists exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.AssertStringIn exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.DefaultResultFormatter exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.DropClass exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.EnableExternalAccess exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.ExpectException exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.ExpectNoException exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Fail exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.FakeFunction exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.FakeTable exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.GetNewTranName exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.InstallExternalAccessKey exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.LogCapturedOutput exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.NewTestClass exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.NullTestResultFormatter exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_ApplyCheckConstraint exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_ApplyForeignKeyConstraint exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_ApplyUniqueConstraint exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_CleanTestResult exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_CompareTables exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_CompareTablesFailIfUnequalRowsExists exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_CreateFakeFunction exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_CreateFakeOfTable exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_CreateProcedureSpy exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_CreateResultTableForCompareTables exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_DisallowOverwritingNonTestSchema exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_GetCursorForRunAll exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_GetCursorForRunNew exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_GetSetupProcedureName exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_Init exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_InputBuffer exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_MarkFakeTable exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_MarkObjectBeforeRename exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_MarkSchemaAsTestClass exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_OutputTestResults exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_Print exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_PrintXML exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RemoveSchemaBinding exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RemoveSchemaBoundReferences exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RenameObjectToUniqueName exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RenameObjectToUniqueNameUsingObjectId exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_ResetNewTestClassList exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_Run exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RunAll exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RunCursor exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RunMethodHandler exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RunNew exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RunTest exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_RunTestClass exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_SaveTestNameForSession exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_SetConfiguration exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_SetFakeViewOff_SingleView exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_SetFakeViewOn_SingleView exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_ValidateFakeTableParameters exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_ValidateObjectsCompatibleWithFakeFunction exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_ValidateProcedureCanBeUsedWithSpyProcedure exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Private_ValidateThatAllDataTypesInTableAreSupported exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RemoveExternalAccessKey exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RemoveObject exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RemoveObjectIfExists exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RenameClass exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Reset exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Run exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RunAll exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RunC exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RunNew exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RunTest exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RunTestClass exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RunWithNullResults exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.RunWithXmlResults exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.SetFakeViewOff exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.SetFakeViewOn exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.SetTestResultFormatter exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.SetVerbose exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.SpyProcedure exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.StubRecord exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.TableToText exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.Uninstall exists.sql" />
    <Build Include="TestBasic\test If stored procedure tSQLt.XmlResultFormatter exists.sql" />
    <Build Include="TestBasic\test If table dbo.Badges exists.sql" />
    <Build Include="TestBasic\test If table dbo.Badges has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.Badges has the correct indexes.sql" />
    <Build Include="TestBasic\test If table dbo.Comments exists.sql" />
    <Build Include="TestBasic\test If table dbo.Comments has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.Comments has the correct indexes.sql" />
    <Build Include="TestBasic\test If table dbo.LinkTypes exists.sql" />
    <Build Include="TestBasic\test If table dbo.LinkTypes has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.LinkTypes has the correct indexes.sql" />
    <Build Include="TestBasic\test If table dbo.PostLinks exists.sql" />
    <Build Include="TestBasic\test If table dbo.PostLinks has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.PostLinks has the correct indexes.sql" />
    <Build Include="TestBasic\test If table dbo.Posts exists.sql" />
    <Build Include="TestBasic\test If table dbo.Posts has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.Posts has the correct indexes.sql" />
    <Build Include="TestBasic\test If table dbo.PostTypes exists.sql" />
    <Build Include="TestBasic\test If table dbo.PostTypes has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.PostTypes has the correct indexes.sql" />
    <Build Include="TestBasic\test If table dbo.Users exists.sql" />
    <Build Include="TestBasic\test If table dbo.Users has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.Users has the correct indexes.sql" />
    <Build Include="TestBasic\test If table dbo.Votes exists.sql" />
    <Build Include="TestBasic\test If table dbo.Votes has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.Votes has the correct indexes.sql" />
    <Build Include="TestBasic\test If table dbo.VoteTypes exists.sql" />
    <Build Include="TestBasic\test If table dbo.VoteTypes has the correct columns.sql" />
    <Build Include="TestBasic\test If table dbo.VoteTypes has the correct indexes.sql" />
    <Build Include="TestBasic\test If table tSQLt.CaptureOutputLog exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.CaptureOutputLog has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.CaptureOutputLog has the correct indexes.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_AssertEqualsTableSchema_Actual exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_AssertEqualsTableSchema_Actual has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_AssertEqualsTableSchema_Expected exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_AssertEqualsTableSchema_Expected has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_Configurations exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_Configurations has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_Configurations has the correct indexes.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_ExpectException exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_ExpectException has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_NewTestClassList exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_NewTestClassList has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_NewTestClassList has the correct indexes.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_NullCellTable exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_NullCellTable has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_RenamedObjectLog exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_RenamedObjectLog has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.Private_RenamedObjectLog has the correct indexes.sql" />
    <Build Include="TestBasic\test If table tSQLt.Run_LastExecution exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.Run_LastExecution has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.TestMessage exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.TestMessage has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.TestResult exists.sql" />
    <Build Include="TestBasic\test If table tSQLt.TestResult has the correct columns.sql" />
    <Build Include="TestBasic\test If table tSQLt.TestResult has the correct indexes.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.F_Num exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.GetTestResultFormatter exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Info exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_Bin2Hex exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_FindConstraint exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetCleanObjectName exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetCleanSchemaName exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetCommaSeparatedColumnList exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetConfiguration exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetConstraintType exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetDataTypeOrComputedColumnDefinition exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetDefaultConstraintDefinition exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetExternalAccessKeyBytes exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetForeignKeyDefinition exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetForeignKeyParColumns exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetForeignKeyRefColumns exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetFullTypeName exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetIdentityDefinition exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetLastTestNameIfNotProvided exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetOriginalTableInfo exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetOriginalTableName exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetQuotedFullName exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetQuotedTableNameForConstraint exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetSchemaId exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_GetUniqueConstraintDefinition exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_IsTestClass exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_QuoteClassNameForNewTestClass exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_ResolveApplyConstraintParameters exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_ResolveFakeTableNamesForBackwardCompatibility exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_ResolveName exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_ResolveObjectName exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_ResolveSchemaName exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_ScriptIndex exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_SqlVariantFormatter exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.Private_SqlVersion exists.sql" />
    <Build Include="TestBasic\test If user defined function tSQLt.TestCaseSummary exists.sql" />
    <Build Include="TestBasic\test If view tSQLt.Private_SysIndexes exists.sql" />
    <Build Include="TestBasic\test If view tSQLt.Private_SysIndexes has the correct columns.sql" />
    <Build Include="TestBasic\test If view tSQLt.Private_SysTypes exists.sql" />
    <Build Include="TestBasic\test If view tSQLt.Private_SysTypes has the correct columns.sql" />
    <Build Include="TestBasic\test If view tSQLt.TestClasses exists.sql" />
    <Build Include="TestBasic\test If view tSQLt.TestClasses has the correct columns.sql" />
    <Build Include="TestBasic\test If view tSQLt.Tests exists.sql" />
    <Build Include="TestBasic\test If view tSQLt.Tests has the correct columns.sql" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Assemblies\tSQLtCLR.dll" />
    <None Include="StackOverflow2013-Tests.publish.xml" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="tSQLtCLR">
      <HintPath>Assemblies\tSQLtCLR.dll</HintPath>
      <SqlAssemblyName>tSQLtCLR</SqlAssemblyName>
      <IsModelAware>True</IsModelAware>
      <GenerateSqlClrDdl>False</GenerateSqlClrDdl>
      <SqlOwnerName>dbo</SqlOwnerName>
      <SqlPermissionSet>SAFE</SqlPermissionSet>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <PreDeploy Include="Script.PreDeployment.sql" />
  </ItemGroup>
  <ItemGroup>
    <PostDeploy Include="Script.PostDeployment.sql" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\StackOverflow2013-Data\StackOverflow2013-Data.sqlproj">
      <Name>StackOverflow2013-Data</Name>
      <Project>{6EFE4CF6-D0C2-4DAA-9907-A71BF7C1ED27}</Project>
      <Private>True</Private>
      <SuppressMissingDependenciesErrors>False</SuppressMissingDependenciesErrors>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <ArtifactReference Include="$(DacPacRootPath)\Extensions\Microsoft\SQLDB\Extensions\SqlServer\140\SqlSchemas\master.dacpac">
      <HintPath>$(DacPacRootPath)\Extensions\Microsoft\SQLDB\Extensions\SqlServer\140\SqlSchemas\master.dacpac</HintPath>
      <SuppressMissingDependenciesErrors>False</SuppressMissingDependenciesErrors>
      <DatabaseVariableLiteralValue>sys</DatabaseVariableLiteralValue>
    </ArtifactReference>
  </ItemGroup>
</Project>